import pandas as pd
import numpy as np
from random import *
from mpl_toolkits.mplot3d import Axes3D
import matplotlib.pyplot as plt

# PF = np.loadtxt('PF_value.txt', dtype=int)
# PF=np.asarray([  -7.,  -46.,  -72.,  107.,   59.,  -32.,  -43.,  -11.,   62.,
#          26.,  -49.,  -13.,   28.,  -31.,  -29.,  -46.,   21.,   11.,
#         -55.,  -34.,   60.,  -46.,   56.,   49.,   -9.,  -28.,   14.,
#         -38.,  -26.,  -62.,   53.,    4.,  -94.,   61.,   55.,   38.,
#          97.,  -83.,  -99.,  120.,   60.,  -36.,  117.,   79.,  100.,
#          37.,    7.,  -66.,   85.,   75.,   98.,   28.,  -35.,  -89.,
#          24.,  -42.,  -33.,   95.,  -55.,    2.,   74.,  -58.,   25.,
#         -32.,  -91.,   60.,  -17.,  -32.,  -78.,   62.,  -37.,  -97.,
#         -35.,    8.,   83.,    3.,   32.,   82.,  -39.,  -70.,   59.,
#          38.,   -7.,  -54.,   79.,  -18.,   83.,   48.,   18.,   57.,
#         118.,   96.,   43.,    4.,  -30.,   37.,   98.,  -45.,  -87.,
#          46.,  -94.,  -79.,  140.,  -97.,   42.,  133.,  -17.,   79.,
#         -47.,   32.,  -29.,  -26.,  -71.,   74.,  -21.,   24.,  -75.,
#         -29.,    8.,  -23.,   94.,  -57.,  -23.,  120.,  -38.,   55.,
#          20.,   50.,   54.,   42.,    0.,   -1.,   93.,   99.,   94.,
#          47.,   28.,  -71.,  -27.,   51.,   15.,   88.,  -25.,  -70.,
#          21.,  -51.,   76.,  -60.,   24.,  -70.,  136.,    7.,   38.,
#         116.,   74.,   16.,   48.,  -46.,   -3.,   61.,  -65.,   93.,
#          91.,  -67.,  -23.,   14.,  -29.,   65.,  132.,  -96.,   32.,
#          88.,   47.,  -47.,   91.,   41.,  -21.,  138.,  -87.,  -31.,
#         -11.,  -78.,   97.,  -14.,   -6.,  -42.,  135.,   38.,   43.,
#         -15.,  -90.,  -65.,   80.,   38.,   94.,  -20.,  -40.,   87.,
#         120.,  -99.,   47.,   66.,   74.,  -16.,   21.,  -81.,   -6.,
#          -8.,    0.,  -10.,  -53.,   46.,  -39.,   24.,   -1.,   -4.,
#          49.,  -79.,  -93.,  -12.,  -68.,   62.,  -17.,  -73.,   89.,
#          -4.,  -40.,  -26.,  -32.,  -18.,    1.,  -50., -100.,  -25.,
#         -57.,  -33.,  -64.,   -4.,   46.,  -41.,   -2.,  -48.,   74.,
#          42.,  -50.,  -33.,  -52.,   60.,  -20.,  127.,  -48.,  -63.,
#          38.,   19.,   23.,   35.,  -89.,   38.,   71.,   87.,   96.,
#         102.,   41.,  -13.,   29.,   61.,  -13.,  -51.,  -78.,   98.,
#         106.,  -62.,  -47.,  116.,  -14.,  -12.,   72.,   69.,   18.,
#          39.,   16.,   77.,   34.,   73.,  -24.,   17.,  -21.,  -75.,
#         102.,  -20.,   73.,   67.,  -17.,   -4.,  -32.,  -45.,  -97.,
#          43.,  -46.,   38.,  -32.,  -88.,  -18.,  -33.,  -53.,    1.,
#          37.,  -31.,  -11.,   17.,   10.,   68.,  -59.,  -24.,  -95.,
#          89.,  -12.,   75.,  102.,  -52.,  -85.,   51.,  -75.,  -78.,
#          87.,   26.,   74.,  -41.,   47.,   55.,   61.,  -48.,  -54.,
#          85.,   31.,   -3.,  110.,   44.,   76.,  -10.,  -81.,    8.,
#          40.,  -42.,  -95.,  120.,  -70.,  -97.,  -19.,  -12.,   49.,
#         -49.,  -69.,   21.,  138.,  -38.,   -2.,  140.,  -22.,   48.,
#          88.,   83.,  -10.,   59.,  -44.,  -92.,   46.,   19.,  -44.,
#          83.,  -10.,   93.,    1.,  -10.,  -40.,   77.,   18.,   10.,
#          60.,  -23.,   15.,  123.,   88.,   45.,   82.,  -82.,  100.,
#          -5.,  -39.,   85.,   61.,  -58.,   95.,  -58.,  -29.,  -16.,
#         120.,  -48.,  -28.,  135.,  -84.,  -63.,   30.,   76.,  -23.,
#         -13.,  -77.,   80.,   82.,  -50.,  -64.,  -34.,  -27.,  -28.,
#         114.,  -92.,   13.,  -55.,   42.,   38.,  101.,  -50.,  -46.,
#          67.,   24.,  -53.,  131.,  -33.,   13.,   89.,   80.,    3.,
#          43.,   40.,   35.,   -5.,   -2.,   89.,   36.,   48.,   32.,
#          27., -100.,   37.,   23.,  -90.,    3.,  132.,   16.,  -54.,
#         -13.,   74.,  -18.,  -55.,  -17., -100.,  -28.,  -40.,  -59.,
#         -12.,   89.,   35.,   -9.,  -71.,  -77.,   -3.,  -57.,  -43.,
#         -46.,   74.,   73.,   57.,  -67.,   -1.,  124.,  -46.,  -81.,
#         105.,   64.,   34.,   93.,   54.,  -14.,   12.,   62.,  -14.,
#          -3.,   40.,   12.,   13.,  -98.,   23.,   -1.,   76.,  -11.,
#         -51.,  -99.,  -25.,  130.,   88.,   31.,  -37.,  -10.,  -20.,
#         -22.,  -68.,   69.,  -57.,  -30.,  -10.,   67.,  -18.,  -79.,
#         -23.,   15.,  -39.,  -40.,   45.,    5.,   92.,   86.,   45.,
#         -27.,  -17.,   60.,   42.,  -72.,   48.,   -9.,  -24.,   -4.,
#          48.,   18.,   -7.,  113.,  -29.,   47.,  -12.,  -63.,   66.,
#         -58.,  -83.,  -38.,   93.,   64.,   -7.,   77.,  -39.,   25.,
#          99.,   31.,  -60.,  -32.,   93.,    0.,   90.,  -62.,   56.,
#          24.,   39.,   56.,  -48.,  -26.,  -27.,   17.,  -63.,   75.,
#          75.,  -29.,  -80.,    5.,  -39.,  -57.,  124.,  -23.,   24.,
#          94.,  -59.,  -73.,  -60.,  -71.,   66.,  -14.,   85.,   81.,
#         -16.,   41.,   87.,   46.,  -37.,   -5.,  -26.,   40.,   78.,
#          20.,   74.,   83.,   91.,  -38.,   35.,   76.,   -4.,   -5.,
#          96.,  -86.,   27.,  -60.,  -31.,  -21.,  -21.,    1.,  -63.,
#         105.,   -2.,   22.,    9.,    1.,  -19.,   21.,   59.,   81.,
#         -24.,  -33.,   78.,   90.,   81.,   20.,   38.,  -18.,  -43.,
#          57.,  -61.,  -58.,  126.,  -87.,   67.,   24.,  -83.,  -80.,
#          42.,   44.,   14.,   23.,  -58.,   89.,   64.,  -78.,  -58.,
#          50.,  -82.,   36.,   85., -100.,   25.,   42.,   21.,  -64.,
#          -6.,   -7.,   74.,  -55.,   55.,   61.,   27.,  -65.,   49.,
#          -8.,   91.,   32.,   88.,   16.,  -50.,   84.,  -29.,   17.,
#          12.,   16.,  -80.,  -55.,  -28.,   37.,   88.,  -81.,  -29.,
#          10.,  -97.,   76.,   23.,  -81.,  -96.,   34.,  -99.,   25.,
#           5.,   84.,   66.,   -2.,    3.,   61.,   11.,  -10.,  -64.,
#         106.,   -8.,  -30.,  120.,   -1.,   95.,  115.,  -62.,   86.,
#          84.,   37.,    8.,    4.,  -81.,  -85.,   26.,  -57.,   26.,
#         -12.,  -13.,  -10.,  -45.,  -93.,   92.,  113.,   -2.,   57.,
#         111.,   51.,   73.,   -7.,  -78.,  -61.,  133.,   88.,   53.,
#          68.,  -73.,  -30.,  138.,  -24.,   62.,   -5.,   74.,    1.,
#         -32.,  -30.,  -72.,   -2.,  -16.,    3.,  131.,    2.,  -80.,
#         -60.,   -6.,  -71.,   92.,  -83.,   84.,   80.,  -66.,   29.,
#         -16.,  -25.,   32.,   66.,    0.,   45.,  -21.,  -76.,  -68.,
#         -20.,  -23.,    0.,   44.,  -67.,   15.,  134.,  -62.,  -81.,
#         100.,  -35.,   63.,   94.,  -77.,    2.,  121.,  -52.,  -87.,
#          20.,  -14.,   48.,  133.,   60.,   14.,   94.,   31.,   48.,
#         121.,  -12.,  -47.,  -37.,   53.,   12.,   23.,   99.,   28.,
#          93.,  -61.,   29.,    7.,  -46.,  -57.,  -38.,  -65.,   19.,
#          -2.,   79.,   19.,   89.,   23.,   61.,   77.,   90.,   -2.,
#         -36.,  -29.,   41.,   -1.,  -99.,  -36.,  -58.,  -50.,   52.,
#          17.,  -61.,  -90.,   -2.,   60.,   18.,   65.,  -97.,   52.,
#         -49.,  -63.,   36.,   99.,   41.,   94.,  -33.,  -27.,  -30.,
#         -22.,  -75.,   77.,   -6.,    7.,   12.,   77.,    0.,  -32.,
#          92.,  -99.,   -4.,    9.,  -46.,   57.,   36.,  -93.,  -49.,
#          -5.,  -26.,    4.,  139.,   -3.,    6.,   40.,   85.,   98.,
#          -1.,   90.,   43.,   71.,   39.,  -18.,  -58.,  -91.,   55.,
#         -22.,   45.,   80.,   71.,    5.,  -91.,   86.,  -11.,   59.])

# score = np.loadtxt('score_value.txt', dtype=int)
# score=np.asarray([ 1.,  0.,  1.,  0.,  0.,  1.,  1.,  0.,  1.,  1.,  0.,  0.,  0.,
#         0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  1.,  1.,  0.,  1.,  0.,
#         0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  1.,  0.,  0.,
#         0.,  0.,  0.,  1.,  0.,  0.,  0.,  0.,  0.,  0.,  1.,  0.,  0.,
#         0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  1.,  0.,  0.,  0.,
#         0.,  0.,  0.,  0.,  0.,  1.,  1.,  0.,  1.,  0.,  1.,  0.,  1.,
#         1.,  1.,  0.,  0.,  1.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,
#         0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,
#         0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  1.,
#         1.,  0.,  0.,  0.,  0.,  0.,  0.,  1.,  0.,  0.,  0.,  0.,  1.,
#         0.,  1.,  0.,  0.,  0.,  0.,  0.,  1.,  0.,  1.,  0.,  0.,  0.,
#         0.,  0.,  1.,  0.,  0.,  0.,  0.,  1.,  1.,  1.,  0.,  1.,  1.,
#         1.,  0.,  0.,  0.,  0.,  0.,  1.,  0.,  0.,  0.,  0.,  1.,  0.,
#         1.,  0.,  1.,  1.,  0.,  1.,  0.,  1.,  0.,  0.,  0.,  0.,  0.,
#         0.,  0.,  1.,  0.,  0.,  1.,  0.,  0.,  0.,  0.,  0.,  1.,  0.,
#         0.,  0.,  1.,  0.,  0.,  0.,  0.,  1.,  1.,  0.,  0.,  0.,  0.,
#         0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,
#         0.,  0.,  0.,  0.,  0.,  1.,  0.,  0.,  0.,  0.,  0.,  1.,  0.,
#         0.,  0.,  0.,  0.,  0.,  0.,  1.,  0.,  0.,  0.,  0.,  0.,  0.,
#         0.,  0.,  1.,  0.,  0.,  1.,  0.,  0.,  0.,  0.,  0.,  1.,  0.,
#         0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  1.,  0.,  0.,  1.,  1.,
#         0.,  0.,  0.,  1.,  1.,  0.,  1.,  0.,  0.,  1.,  0.,  0.,  1.,
#         1.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  1.,  0.,  0.,  0.])
# area = np.loadtxt('areas_value.txt', dtype=float)
# area=np.asarray([ 2134.74,  1474.24,  2126.9 ,  2008.28,  2004.08,  2116.08,
#         2153.87,  2080.78,  2157.39,  2208.5 ,  1909.28,  1827.28,
#         1663.3 ,  1645.28,  1168.23,  1883.28,  1682.28,  2041.1 ,
#         2069.11,  1648.19,  1668.28,  2202.08,  2127.1 ,  1883.78,
#         2128.9 ,  2034.89,  2091.99,  1914.3 ,  1802.23,  1877.98,
#         1408.3 ,  2087.1 ,  1697.31,  1938.04,   929.28,   916.3 ,
#         2157.99,  2081.07,  2041.78,  2098.87,  1840.49,  1305.3 ,
#         2103.13,  1829.3 ,  1548.3 ,  1810.08,  2083.99,  1709.28,
#         2047.19,  2160.83,  1100.24,  1584.28,  1926.73,  1720.29,
#         1789.3 ,  2033.19,  1100.28,  1836.31,  1757.3 ,  1194.8 ,
#         2032.1 ,  2192.91,  1074.19,  2097.6 ,  1640.23,  2087.03,
#         1290.24,  1695.1 ,  2056.54,  2069.83,  2176.08,  2145.03,
#         1931.8 ,  2115.  ,  2028.9 ,  2116.11,  2030.09,  2114.88,
#         2151.54,  2164.04,  2076.11,  1863.38,  2165.78,  1347.24,
#         1901.28,  1866.14,  1876.24,  1729.31,  1982.18,  2058.78,
#         1587.78,  1550.3 ,  1800.5 ,  1917.1 ,  1891.1 ,  2035.78,
#         1468.28,  1821.23,  2087.78,  1951.28,  2083.61,  2093.8 ,
#         1927.28,  2040.1 ,  2077.79,  1730.28,  1727.38,  1926.68,
#         1697.31,  2092.58,  1795.28,  1691.28,  1548.23,  2051.1 ,
#         1917.58,  1561.3 ,  2116.  ,  2159.73,  1099.28,   928.28,
#         1791.24,  1904.78,  2024.78,  1546.28,  2126.69,  1763.29,
#         1653.19,  1260.81,  1517.58,  2125.1 ,  1712.3 ,  2147.6 ,
#         1470.31,  1198.19,  1961.1 ,  2097.11,  1783.3 ,  2176.91,
#         1549.23,  2108.33,  1708.03,  1756.28,  1159.31,  1583.19,
#         2039.04,  2121.19,  1905.08,  1935.11,  1932.28,  1315.28,
#         2148.95,  2116.78,  2151.04,  1957.03,  2143.74,  2177.99,
#         2125.08,  1690.81,  1560.28,  1709.23,  1534.19,  2015.3 ,
#         2123.23,  2047.99,  2022.19,  2074.56,  1019.74,  2162.03,
#         2099.78,  2121.53,  1881.78,  2158.24,  2125.99,  1620.28,
#         2118.1 ,  1818.04,  2159.03,  1951.99,  1453.23,  2084.11,
#         2088.59,  1878.24,  1873.68,  1888.28,  2103.21,  1683.11,
#         1804.08,  2119.99,  1904.19,  1783.28,  2082.39,  1379.31,
#         1707.28,  2113.61,  2067.11,  2048.08,  1891.23,  2139.24,
#         1977.11,  1613.19,  1798.3 ,  1598.83,  2166.61,  2117.74,
#         1606.3 ,  2028.01,  2089.19,  2097.8 ,  1576.24,  1932.24,
#         1901.24,  1123.3 ,  2036.1 ,  1808.28,  1912.03,  1787.28,
#         1797.19,  1619.74,  2012.08,  2069.04,  2074.28,  1947.78,
#         1974.99,  1814.34,  1634.34,  2089.03,  2108.03,  1866.04,
#         2058.08,  2020.23,  1927.83,  1975.03,  2110.74,  2094.09,
#         1666.24,  1097.28,  1102.73,  1942.53,  2073.78,  1947.8 ,
#         2115.03,  2082.8 ,  1409.28,  1522.24,  2095.73,   972.31,
#         1864.58,   896.24,  2004.11,  2155.69,  2059.78,  1593.19,
#         2186.  ,  1589.34,  1778.3 ,  2087.04,  1818.28,  2075.78,
#         2123.8 ,  1999.23,  1292.24,  1534.28,  1703.29,  1714.31,
#         1991.38,  1033.24,  1619.23,  1693.19,  2115.04,  1895.24,
#         1634.14,  2230.53,  2134.54,  1997.08,  1603.23,  1875.28,
#         2168.03,  2130.53,  2091.81,  2154.78,  2055.19,  1832.41,
#         2157.6 ,  1728.28,  2053.76,  2109.04,  2129.09,  1785.19,
#         1812.3 ,  2086.74,  1888.99,  2065.08,  1147.23,  1950.19,
#         1912.1 ,  1685.28,  2120.28,  2076.11,  1863.05,  1608.24])
# fig = plt.figure()
PF=[]
score=[]
area=[]

for m in range(5):
    PF_save = np.loadtxt('PF_value'+str(m)+'.txt', dtype=int)
    score_save = np.loadtxt('score_value'+str(m)+'.txt', dtype=int)
    area_save = np.loadtxt('areas_value'+str(m)+'.txt', dtype=float)
    PF = np.append(PF,PF_save)
    score = np.append(score,score_save)
    area = np.append(area,area_save)
print(PF.shape)
print(score.shape)
print(area.shape)


xs=[]
ys=[]
zs=[]
for i in range(0,1500,3):
    xs=np.append(xs,PF[i])
    ys=np.append(ys,PF[i+1])
    zs=np.append(zs,PF[i+2])
print(xs.shape)
print(ys.shape)
print(zs.shape)

fig = plt.figure()
ax = fig.add_subplot(111, projection='3d')

xs_g0=[]
ys_g0=[]
zs_g0=[]

xs_b0=[]
ys_b0=[]
zs_b0=[]

xs_g1=[]
ys_g1=[]
zs_g1=[]

xs_b1=[]
ys_b1=[]
zs_b1=[]

xs_g2=[]
ys_g2=[]
zs_g2=[]

xs_b2=[]
ys_b2=[]
zs_b2=[]

xs_g3=[]
ys_g3=[]
zs_g3=[]

xs_b3=[]
ys_b3=[]
zs_b3=[]

xs_g4=[]
ys_g4=[]
zs_g4=[]

xs_b4=[]
ys_b4=[]
zs_b4=[]

for i in range (100):
    if score[i]==1:
        xs_g0=np.append(xs_g0,xs[i])
        ys_g0=np.append(ys_g0,ys[i])
        zs_g0=np.append(zs_g0,zs[i])
       
    else:
        xs_b0=np.append(xs_b0,xs[i])
        ys_b0=np.append(ys_b0,ys[i])
        zs_b0=np.append(zs_b0,zs[i])

for i in range (100,200):
    if score[i]==1:
        xs_g1=np.append(xs_g1,xs[i])
        ys_g1=np.append(ys_g1,ys[i])
        zs_g1=np.append(zs_g1,zs[i])
       
    else:
        xs_b1=np.append(xs_b1,xs[i])
        ys_b1=np.append(ys_b1,ys[i])
        zs_b1=np.append(zs_b1,zs[i])

for i in range (200,300):
    if score[i]==1:
        xs_g2=np.append(xs_g2,xs[i])
        ys_g2=np.append(ys_g2,ys[i])
        zs_g2=np.append(zs_g2,zs[i])
       
    else:
        xs_b2=np.append(xs_b2,xs[i])
        ys_b2=np.append(ys_b2,ys[i])
        zs_b2=np.append(zs_b2,zs[i])

for i in range (300,400):
    if score[i]==1:
        xs_g3=np.append(xs_g3,xs[i])
        ys_g3=np.append(ys_g3,ys[i])
        zs_g3=np.append(zs_g3,zs[i])
       
    else:
        xs_b3=np.append(xs_b3,xs[i])
        ys_b3=np.append(ys_b3,ys[i])
        zs_b3=np.append(zs_b3,zs[i])

for i in range (400,500):
    if score[i]==1:
        xs_g4=np.append(xs_g4,xs[i])
        ys_g4=np.append(ys_g4,ys[i])
        zs_g4=np.append(zs_g4,zs[i])
       
    else:
        xs_b4=np.append(xs_b4,xs[i])
        ys_b4=np.append(ys_b4,ys[i])
        zs_b4=np.append(zs_b4,zs[i])
print(xs_g0)
ax.scatter(xs_g0, ys_g0, zs_g0, facecolors=[1,0,0], marker='^')
ax.scatter(xs_b0, ys_b0, zs_b0, facecolors=[0,0,0], marker='o')

ax.scatter(xs_g1, ys_g1, zs_g1, facecolors=[1,0.5,1], marker='^')
ax.scatter(xs_b1, ys_b1, zs_b1, facecolors=[0.5,0.5,0.5], marker='o')

ax.scatter(xs_g2, ys_g2, zs_g2, facecolors=[1,0.5,0.5], marker='^')
ax.scatter(xs_b2, ys_b2, zs_b2, facecolors=[0,0,0.5], marker='o')

ax.scatter(xs_g3, ys_g3, zs_g3, facecolors=[1,0,1], marker='^')
ax.scatter(xs_b3, ys_b3, zs_b3, facecolors=[0,0,1], marker='o')

ax.scatter(xs_g4, ys_g4, zs_g4, facecolors=[1,0,0.5], marker='^')
ax.scatter(xs_b4, ys_b4, zs_b4, facecolors=[0.4,0.4,1], marker='o')
# plt.title("iteration = 500")
# # plt.xlabel("B&C value")
# # plt.ylabel("minValue")
# # plt.zlabel("maxValue")
# ax.set_xlabel('B&C value')
# ax.set_ylabel('minValue')
# ax.set_zlabel('maxValue')
plt.show()